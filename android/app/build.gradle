plugins {
    id "com.android.application"
    // START: FlutterFire Configuration
    id 'com.google.gms.google-services'
    // END: FlutterFire Configuration
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}


def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

android {
    namespace = "com.dgul.maritimeai"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    signingConfigs {
        release {
            if (keystorePropertiesFile.exists()) {
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            }
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }


    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.dgul.maritimeai"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdk = 23
        targetSdk = 35
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
    }

  
    
}

flutter {
    source = "../.."
}

// Ganti skrip lama di akhir file android/app/build.gradle Anda dengan ini.
// Skrip ini kompatibel dengan versi Android Gradle Plugin yang lebih baru.
android.applicationVariants.all { variant ->
    if (variant.buildType.name == 'release') {
        variant.outputs.all { output ->
            def packageTask = tasks.findByName("package${variant.name.capitalize()}")
            if (packageTask != null) {
                packageTask.doLast {
                    def unalignedApk = output.outputFile
                    if (unalignedApk != null && unalignedApk.name.endsWith('.apk')) {
                        // Mendefinisikan path ke zipalign tool dari Android SDK
                        def zipalignPath = new File(android.sdkDirectory, 'build-tools').listFiles().sort().last().absolutePath + File.separator + "zipalign"
                        
                        // Mendefinisikan path sementara untuk APK yang sudah di-align
                        def alignedApkPath = unalignedApk.absolutePath.replace('.apk', '-aligned.apk')
                        
                        // Menjalankan perintah zipalign
                        exec {
                            executable zipalignPath
                            args '-f', '-p', '16384', unalignedApk.absolutePath, alignedApkPath
                        }
                        
                        // Hapus APK lama yang belum di-align, lalu ganti namanya dengan yang baru
                        unalignedApk.delete()
                        new File(alignedApkPath).renameTo(unalignedApk)
                        println "Successfully zipalign'd APK with 16KB page alignment."
                    }
                }
            }
        }
    }
}

